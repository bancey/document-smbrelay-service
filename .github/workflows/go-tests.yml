name: Go Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Go Application
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.23', '1.24', '1.25']
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go fmt
      run: |
        if [ -n "$(gofmt -s -l .)" ]; then
          echo "Go code is not formatted:"
          gofmt -s -d .
          exit 1
        fi
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        SMB_SERVER_NAME: testserver
        SMB_SERVER_IP: 127.0.0.1
        SMB_SHARE_NAME: testshare
        SMB_USERNAME: testuser
        SMB_PASSWORD: testpass
        LOG_LEVEL: ERROR
    
    - name: Generate coverage report
      if: matrix.go-version == '1.22'
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v4
      if: matrix.go-version == '1.22'
      with:
        name: coverage-report
        path: coverage.html

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'
    
    - name: Build binary
      run: go build -v -o bin/server ./cmd/server
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: server-binary
        path: bin/server
        retention-days: 7

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m
