name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    services:
      samba:
        image: dperson/samba:latest
        env:
          USER: testuser;testpass
          SHARE: testshare;/mnt/testshare;yes;no;no;testuser
          SMB: true
          NMBD: true
        ports:
          - 1445:445
          - 1137:137
          - 1138:138  
          - 1139:139
        options: >-
          --health-cmd "smbclient -L localhost -U testuser%testpass"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Fix Samba permissions for integration tests
        run: |
          # Wait for Samba service to be ready
          sleep 10
          # Fix the share directory permissions so that the SMB user can create directories
          docker exec $(docker ps --filter "ancestor=dperson/samba:latest" --format "{{.ID}}") chown smbuser:smb /mnt/testshare
          docker exec $(docker ps --filter "ancestor=dperson/samba:latest" --format "{{.ID}}") chmod 775 /mnt/testshare

      - name: Validate code syntax
        run: |
          python -m py_compile app/main.py
          python -c "import app.main; print('Import successful')"

      - name: Run tests with coverage
        env:
          CI_SMB_PORT: 1445
          CI_SMB_SERVER_IP: localhost
        run: |
          python -m pytest --tb=short --cov=app --cov-report=xml --cov-report=term-missing

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # set commit SHA with branch prefix for branch builds
            type=ref,event=branch,suffix=-{{sha}}
            # set commit SHA with pr prefix for PR builds  
            type=ref,event=pr,suffix=-{{sha}}
            # set pr-<number> for pull requests
            type=ref,event=pr,prefix=pr-
            # set branch name for non-main branches
            type=ref,event=branch
            # set tag name for tags
            type=ref,event=tag
          labels: |
            org.opencontainers.image.title=Document SMB Relay Service
            org.opencontainers.image.description=A FastAPI service that accepts file uploads and writes them to SMB shares

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
